// =========================================
// METADATA INFORMATION ABOUT THE WORKFLOW
// =========================================
manifest {
    name        = 'quick-fold-nf'
    description = 'A Nextflow workflow for protein structure prediction.'
    version     = '0.0.0'
    homePage    = 'https://github.com/stracquadaniolab/quick-fold-nf.git'
    author      = 'Giovanni Stracquadanio'
    nextflowVersion = '>=23.04.2'
}

// =========================================
//  WORKFLOW PROFILES
// =========================================
profiles {

    //
    // DEFAULT PROFILE 
    //  
    standard {
        executor.name       = 'local'
        executor.cpus       = 4
        executor.memory     = 8.GB
        executor.queueSize  = 5

        process.executor    = 'local'
        process.cpus        = 1
        process.memory      = 2.GB
        process.shell       = ['/bin/bash', '-euo', 'pipefail']
    }

    // =========================================
    // COMPUTING INFRASTRACTURES
    // =========================================

    //
    // github
    // - uses github actions CI infrastructure
    //
    github {
        executor.name       = 'local'
        executor.cpus       = 2
        executor.memory     = 6.GB
        executor.queueSize  = 5

        process.executor    = 'local'
        process.cpus        = 1
        process.memory      = 2.GB
        process.shell       = ['/bin/bash', '-euo', 'pipefail']
    }

    // 
    // hpc.cell 
    // - uses the 'cell' lab cluster
    //
    'hpc.cell' {
        executor.name         = 'slurm'
        executor.queueSize    = 25

        process.executor      = 'slurm'
        process.queue         = 'compute'
        process.cpus          = 2
        process.memory        = 4.GB
        process.shell         = ['/bin/bash', '-euo', 'pipefail']

        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    } 

    //
    // hpc.cell.gpu 
    // - uses the 'cell' lab GPU cluster
    //
    'hpc.cell.gpu' {
        executor.name          = 'slurm'
        executor.queueSize     = 25

        process.executor       = 'slurm'
        process.queue          = 'gpu-compute'
        process.cpus           = 1
        process.memory         = 8.GB
        process.shell          = ['/bin/bash', '-euo', 'pipefail']

        singularity.enabled    = true
        singularity.autoMounts = true
        singularity.runOptions = "--nv"
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    } 

    // =========================================
    // ARCHITECTURES PROFILES
    // =========================================
    
    //
    //  amd64 
    //  - emulate amd64 using docker
    //
    amd64 {
        docker.enabled         = true
        docker.userEmulation   = true
        docker.runOptions      = '--platform linux/amd64'
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }

    //
    // nvidia
    // - enables computing on NVidia GPUs
    //
    nvidia {
        singularity.enabled    = true
        singularity.runOptions = "--nv"
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }    

    // =========================================
    // RUNTIME PROFILES
    // =========================================

    //
    // docker
    // - uses docker OCI runtime
    //
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    
    //
    //  singularity
    //  - uses singularity OCI runtime
    //
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }

    // =========================================
    // PROVISIONING PLATFORMS
    // =========================================

    //
    // wave
    // - uses SeqeraLabs wave platform
    //
    wave {
        wave.enabled     = true
        build.repository = 'ghcr.io/stracquadaniolab/wave'
    }    


    // =========================================
    // DEFAULT TEST PROFILE
    // =========================================
    test {
        params {
          inputFile   = "${baseDir}/testdata/protein.fasta"
        }
    }
}

// =========================================
//  ENVIRONMENT CONFIGURATION
// =========================================
env {
    // Export this variable to prevent local Python libraries
    // from conflicting with those in the container
    PYTHONNOUSERSITE = 1
    // this is required to make the container run properly in singularity
    PATH="/opt/conda/bin:$PATH"
}

// =========================================
//  LOG AND REPORTING CONFIGURATION
// =========================================
report {
    enabled = true
    
    // Nextflow will generate a report file stored in the `logs` directory 
    // with a filename prefix (`report`) followed by a timestamp (yyyy.MM.dd-HH.mm.ss) 
    file = "logs/report-${ (new Date()).format("yyyy.MM.dd-HH.mm.ss") }.html"
}